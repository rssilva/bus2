require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ScoresController, type: :controller do
  fixtures :all

  # This should return the minimal set of attributes required to create a valid
  # Score. As you add validations to Score, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {:user_id => users(:one).id}
  }

  let(:invalid_attributes) {
    {:user_id => ''}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ScoresController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all scores as @scores" do
      score = Score.create! valid_attributes
      get :index, {}, valid_session
      expect(response.body).to eq(Score.all.to_json)
    end
  end

  describe "GET #show" do
    it "assigns the requested score as @score" do
      score = Score.create! valid_attributes
      get :show, {:id => score.to_param}, valid_session
      expect(assigns(:score)).to eq(score)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Score" do
        expect {
          post :create, {:score => valid_attributes}, valid_session
        }.to change(Score, :count).by(1)
      end

      it "adds 1 hit to user score and updates last_hit" do
        time_now = Time.parse("Feb 24 1981")
        Time.stubs(:now).returns(time_now)

        post :create, {:score => valid_attributes}, valid_session
        expect(Score.find_by_user_id(valid_attributes[:user_id]).hits).to eq(1)
        expect(Score.find_by_user_id(valid_attributes[:user_id]).last_hit).to eq(time_now)
      end

      it "updates hits by 1 when score exists" do

        post :create, {:score => valid_attributes}, valid_session
        expect(Score.find_by_user_id(valid_attributes[:user_id]).hits).to eq(1)
        post :create, {:score => valid_attributes}, valid_session
        expect(Score.find_by_user_id(valid_attributes[:user_id]).hits).to eq(2)
      end

      it "assigns a newly created score as @score" do
        post :create, {:score => valid_attributes}, valid_session
        expect(assigns(:score)).to be_a(Score)
        expect(assigns(:score)).to be_persisted
      end

      it "returns created code" do
        post :create, {:score => valid_attributes}, valid_session
        expect(response).to have_http_status(:created)
      end
    end

    context "with invalid params" do
      it "should not persist user" do
        expect {
          post :create, {:score => invalid_attributes}, valid_session
        }.to change(Score, :count).by(0)
      end

      it "returns unprocessable_entity" do
        post :create, {:score => invalid_attributes}, valid_session
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested score" do
      score = Score.create! valid_attributes
      expect {
        delete :destroy, {:id => score.to_param}, valid_session
      }.to change(Score, :count).by(-1)
    end

    it "returns no_content" do
      score = Score.create! valid_attributes
      delete :destroy, {:id => score.to_param}, valid_session
      expect(response).to have_http_status(:no_content)
    end
  end

end
