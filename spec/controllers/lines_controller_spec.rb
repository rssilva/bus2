require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe LinesController, type: :controller do
  fixtures :all

  before(:each) do
    country = Country.find_or_create_by({:name => 'Country'})
    state = State.find_or_create_by({:name => 'state', :country => country, :uf => 'ST'})
    @city = City.find_or_create_by({:name => 'City', :state => state})
  end

  # This should return the minimal set of attributes required to create a valid
  # Line. As you add validations to Line, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {:name => 'T7', :city_id => @city.id}
  }

  let(:invalid_attributes) {
    {:name => '', :city_id => nil}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # LinesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all lines as @lines" do
      Line.destroy_all
      line = Line.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:lines)).to eq([line])
    end
  end

  describe "GET #show" do
    it "assigns the requested line as @line" do
      line = Line.create! valid_attributes
      get :show, {:id => line.to_param}, valid_session
      expect(assigns(:line)).to eq(line)
    end
  end

  describe "GET #edit" do
    it "assigns the requested line as @line" do
      line = Line.create! valid_attributes
      get :edit, {:id => line.to_param}, valid_session
      expect(assigns(:line)).to eq(line)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Line" do
        expect {
          post :create, {:line => valid_attributes}, valid_session
        }.to change(Line, :count).by(1)
      end

      it "assigns a newly created line as @line" do
        post :create, {:line => valid_attributes}, valid_session
        expect(assigns(:line)).to be_a(Line)
        expect(assigns(:line)).to be_persisted
      end

      it "returns created code" do
        post :create, {:line => valid_attributes}, valid_session
        expect(response).to have_http_status(:created)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved line as @line" do
        post :create, {:line => invalid_attributes}, valid_session
        expect(assigns(:line)).to be_a_new(Line)
      end

      it "returns unprocessable_entity code" do
        post :create, {:line => invalid_attributes}, valid_session
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {:name => 'T3'}
      }

      it "updates the requested line" do
        Line.destroy_all
        line = Line.create! valid_attributes
        put :update, {:id => line.to_param, :line => new_attributes}, valid_session
        line.reload
        expect(line.name).to eq(new_attributes[:name])
      end

      it "assigns the requested line as @line" do
        line = Line.create! valid_attributes
        put :update, {:id => line.to_param, :line => valid_attributes}, valid_session
        expect(assigns(:line)).to eq(line)
      end

      it "returns ok" do
        line = Line.create! valid_attributes
        put :update, {:id => line.to_param, :line => valid_attributes}, valid_session
        expect(response).to have_http_status(:ok)
      end
    end

    context "with invalid params" do
      it "assigns the line as @line" do
        line = Line.create! valid_attributes
        put :update, {:id => line.to_param, :line => invalid_attributes}, valid_session
        expect(assigns(:line)).to eq(line)
      end

      it "returns unprocessable_entity" do
        line = Line.create! valid_attributes
        put :update, {:id => line.to_param, :line => invalid_attributes}, valid_session
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested line" do
      line = Line.create! valid_attributes
      expect {
        delete :destroy, {:id => line.to_param}, valid_session
      }.to change(Line, :count).by(-1)
    end

    it "returns no_content code" do
      line = Line.create! valid_attributes
      delete :destroy, {:id => line.to_param}, valid_session
      expect(response).to have_http_status(:no_content)
    end
  end

end
